@startuml
skinparam linetype polyline
skinparam linetype ortho
actor       User        as user
user -> MdfToSpark : pass flowname, inputpath, className, appName
ScriptCodeFileSource --> MdfToSpark : returns List[String] - list of code lines
MdfToSpark -> CodeGenerator : Create CodeGenerator object
CodeGenerator -> MappingDataFlowParser: invoke parse function to parse \n list of data flow line codes
MappingDataFlowParser -> MappingDataFlowParser : invoke parseParameterLines() \n to parse parameters
MappingDataFlowParser -> MappingDataFlowParser : invoke scriptCodeSteps() to map lines \n of code to individual transformation
MappingDataFlowParser -> ParserRegistry: get parser object from \n parser registry using matchRegExRule
MappingDataFlowParser --> "Syntactical Parser" : invoke dataflow syntactical parser
MappingDataFlowParser -->CodeGenerator : returns List[SparkCodeGenerator]
MdfToSpark -> SparkFileTemplateReader : Read Spark File Template
SparkFileTemplateReader -> SparkFileTemplateReader : Apply template parameters
SparkFileTemplateReader --> CodeGenerator : returns generated \n final Scala Spark/PySpark code
MdfToSpark -> FileFormatCodeWriter : Write List[SparkCodeGenerator] to Spark Scala Code file
FileFormatCodeWriter -> FileFormatCodeWriter : Apply code formatter
FileFormatCodeWriter -> FileFormatCodeWriter : Write to file
@enduml